#include <iostream>
#include <set>
#include <utility>
#include <vector>
#include <algorithm>

using namespace std;

string rotateVert (string b)
{
	for (auto& x : b)
	{
		if (x == 'U')
			x = 'D';
		else if (x == 'D')
			x = 'U';
/*
		if (x == 'R')
			x = 'L';
		else if (x == 'L')
			x = 'R';
*/
	}
	return b;
}

string rotate90 (string b)
{
	for (auto& x : b)
	{
		if (x == 'R')
			x = 'D';
		else if (x == 'D')
			x = 'L';
		else if (x == 'L')
			x = 'U';
		else if (x == 'U')
			x = 'R';
	}
	return b;
}

set < pair < int, int > > get_points (string a)
{
	set < pair <int, int> > p;
	set < pair < int , int > > ans;
	p.insert ({0,0});
	int X = 0, Y = 0, minX = 0, minY = 0;
	for (auto& x : a)
	{
		if (x == 'R')
			p.insert ({++X, Y});
		if (x == 'L')
		{
			p.insert ({--X, Y});
			minX = min (minX, X);
		}
		if (x == 'U')
		{
			p.insert ({X, --Y});
			minY = min (minY, Y);
		}
		if (x == 'D')
			p.insert ({X, ++Y});
	}
	for (auto it = p.begin () ; it != p.end () ; it ++)
	{
		ans.insert ({it->first - minX, it->second - minY});
	}
	return move (ans);
}
bool is_equal_snakes (string a, string b)
{
	if (a.size () != b.size ())
		return false;
	auto pa = get_points (a);
	auto pb = get_points (b);
	auto ita = pa.begin ();
	auto itb = pb.begin ();
	bool g = true;
	bool h = (rotateVert (a).compare (b) == 0);
	for ( ; ita != pa.end () and g ; ita ++, itb ++)
		g = g and (*ita == *itb);
	return h or g;
}

set < string > allAnswers (set < string > a)
{
	set < string > ans;
	for (set <string>::iterator it1 = a.begin () ; it1 != a.end () ; it1 ++)
	{
		set <string>::iterator it2 = ++it1;
		it1 --;
		for ( ; it2 != a.end () ; it2 ++)
		{
			if (is_equal_snakes (*it1, *it2))
				goto Skip;
			if (is_equal_snakes (*it1, rotate90 (*it2)))
				goto Skip;
			if (is_equal_snakes (*it1, rotate90 (rotate90 (*it2))))
				goto Skip;
			if (is_equal_snakes (*it1, rotate90 (rotate90 (rotate90 (*it2)))))
				goto Skip;
			if (is_equal_snakes (*it1, rotateVert (*it2)))
				goto Skip;
		}
		//cout << it1->size () << ": " << "Added " << *it1 << endl;
		ans.insert (*it1);
		Skip:
		{
	
		}
	}
	return move (ans);
}

bool check (string a)
{
	set < pair <int, int> > p;
	p.insert ({0,0});
	int X = 0, Y = 0;
	for (auto& x : a)
	{
		if (x == 'R')
			if (!p.insert ({++X, Y}).second)
				return false;
		if (x == 'L')
			if (!p.insert ({--X, Y}).second)
				return false;
		if (x == 'U')
			if (!p.insert ({X, --Y}).second)
				return false;
		if (x == 'D')
			if (!p.insert ({X, ++Y}).second)
				return false;
	}
	return true;
}

set < string > mem [15];

set < string > allSnakes (int n)
{
	if (!mem [n].empty ())
	{
		return mem [n];
	}
	auto X = allSnakes (n - 1);
	set < string > ans;
	for (auto& x : X)
	{
		string y;
		y = x + "R";
		if (check (y))
			ans.insert (y);
		y = x + "D";
		if (check (y))
			ans.insert (y);
		y = x + "L";
		if (check (y))
			ans.insert (y);
		y = x + "U";
		if (check (y))
			ans.insert (y);
	}
	return (mem [n] = move (allAnswers (move (ans)))); 
}


void print (string b)
{
	//cout << "\"" << b << "\"," << "\n";
	cout << b << "\n";
	return;
	char** a = new char* [b.size ()];
	for (int i = 0 ; i < (int)b.size () ; i ++)
	{
		a [i] = new char [b.size ()];
		for (int j = 0 ; j < (int)b.size () ; j ++)
			a [i][j] = ' ';
	}
	for (auto& x : get_points (b))
		a [x.first][x.second] = '#';
	for (int i = 0 ; i < (int)b.size () ; i ++, cout << "\n")
		for (int j = 0 ; j < (int)b.size () ; j ++)
			cout << a [i][j];
	cout << "-------------\n";
}

int main ()
{
	mem [1] = {"S"};
	mem [2] = {"SU"};
	mem [3] = {"SUR","SUU"};
	mem [4] = {"SURD","SURU","SUUR","SUUU"};
	mem [5] = {"SURDD","SURUR","SUURD","SUURR","SUURU","SUUUR","SUUUU"};
	mem [6] = {"SURDDD","SURURD","SURURR","SURURU","SUURDD","SUURDR","SUURRD","SUURRR","SUURRU","SUURUR","SUURUU","SUUURD","SUUURR","SUUURU","SUUUUR","SUUUUU"};
	mem [7] = {"SURDDDD","SURDDDL","SURDDDR","SURURDD","SURURDR","SURURRD","SURURRR","SURURRU","SURURUL","SURURUR","SUURDDD","SUURDRD","SUURDRR","SUURRDD","SUURRDL","SUURRDR","SUURRRD","SUURRRR","SUURRRU","SUURRUR","SUURRUU","SUURURD","SUURURR","SUURURU","SUURUUL","SUURUUR","SUUURDD","SUUURDR","SUUURRD","SUUURRR","SUUURRU","SUUURUR","SUUURUU","SUUUURD","SUUUURR","SUUUURU","SUUUUUR","SUUUUUU"};
	mem [8] = {"SURDDDDD","SURDDDDL","SURDDDDR","SURDDDLD","SURDDDLL","SURDDDRD","SURDDDRU","SURURDDD","SURURDDR","SURURDRD","SURURDRR","SURURRDD","SURURRDR","SURURRRD","SURURRRR","SURURRRU","SURURRUR","SURURULU","SURURURD","SURURURR","SURURURU","SUURDDDD","SUURDDDR","SUURDRDD","SUURDRDR","SUURDRRD","SUURDRRR","SUURDRRU","SUURRDDD","SUURRDDL","SUURRDDR","SUURRDLD","SUURRDRD","SUURRRDD","SUURRRDL","SUURRRDR","SUURRRRD","SUURRRRR","SUURRRRU","SUURRRUR","SUURRRUU","SUURRURD","SUURRURR","SUURRURU","SUURRUUL","SUURRUUR","SUURURDD","SUURURDR","SUURURRD","SUURURRR","SUURURRU","SUURURUR","SUURURUU","SUURUULL","SUURUULU","SUURUURD","SUURUURR","SUURUURU","SUUURDDD","SUUURDDR","SUUURDRD","SUUURDRR","SUUURRDD","SUUURRDL","SUUURRDR","SUUURRRD","SUUURRRR","SUUURRRU","SUUURRUR","SUUURRUU","SUUURURD","SUUURURR","SUUURURU","SUUURUUL","SUUURUUR","SUUURUUU","SUUUURDD","SUUUURDR","SUUUURRD","SUUUURRR","SUUUURRU","SUUUURUR","SUUUURUU","SUUUUURD","SUUUUURR","SUUUUURU","SUUUUUUR","SUUUUUUU"};
	mem [9] = {"SURDDDDDD","SURDDDDDL","SURDDDDDR","SURDDDDLD","SURDDDDLL","SURDDDDRD","SURDDDLDL","SURDDDLDR","SURDDDLLD","SURDDDLLL","SURDDDLLU","SURDDDRDD","SURDDDRDL","SURDDDRUR","SURURDDDD","SURURDDDL","SURURDDDR","SURURDDRD","SURURDDRR","SURURDRDD","SURURDRDL","SURURDRRD","SURURDRRR","SURURDRRU","SURURRDDD","SURURRDDL","SURURRDDR","SURURRDRD","SURURRRDD","SURURRRDL","SURURRRDR","SURURRRRD","SURURRRRR","SURURRRRU","SURURRRUR","SURURRURD","SURURRURR","SURURRURU","SURURULUL","SURURULUR","SURURULUU","SURURURDD","SURURURDR","SURURURRD","SURURURRR","SURURURRU","SURURURUL","SURURURUR","SUURDDDDD","SUURDDDDL","SUURDDDDR","SUURDDDRD","SUURDDDRU","SUURDRDDD","SUURDRDDL","SUURDRDDR","SUURDRDRD","SUURDRDRR","SUURDRRDD","SUURDRRDL","SUURDRRDR","SUURDRRRD","SUURDRRRR","SUURDRRRU","SUURDRRUR","SUURDRRUU","SUURRDDDD","SUURRDDDL","SUURRDDDR","SUURRDDLD","SUURRDDRD","SUURRDLDD","SUURRDLDR","SUURRDRDD","SUURRDRDL","SUURRDRDR","SUURRRDDD","SUURRRDDL","SUURRRDDR","SUURRRDLD","SUURRRDRD","SUURRRDRR","SUURRRRDD","SUURRRRDL","SUURRRRDR","SUURRRRRD","SUURRRRRR","SUURRRRRU","SUURRRRUR","SUURRRRUU","SUURRRURD","SUURRRURR","SUURRRURU","SUURRRUUL","SUURRRUUR","SUURRURDD","SUURRURDR","SUURRURRD","SUURRURRR","SUURRURRU","SUURRURUR","SUURRUULL","SUURRUULU","SUURRUURD","SUURRUURR","SUURRUURU","SUURURDDD","SUURURDDL","SUURURDDR","SUURURDRD","SUURURDRR","SUURURRDD","SUURURRDL","SUURURRDR","SUURURRRD","SUURURRRR","SUURURRRU","SUURURRUR","SUURURRUU","SUURURURD","SUURURURR","SUURURURU","SUURURUUL","SUURURUUR","SUURUULLD","SUURUULLU","SUURUULUL","SUURUULUR","SUURUULUU","SUURUURDD","SUURUURDR","SUURUURRD","SUURUURRR","SUURUURRU","SUURUURUL","SUURUURUR","SUURUURUU","SUUURDDDD","SUUURDDDR","SUUURDDRD","SUUURDDRR","SUUURDRDD","SUUURDRDL","SUUURDRDR","SUUURDRRD","SUUURDRRR","SUUURDRRU","SUUURRDDD","SUUURRDDL","SUUURRDDR","SUUURRDLD","SUUURRDRD","SUUURRDRR","SUUURRRDD","SUUURRRDL","SUUURRRDR","SUUURRRRD","SUUURRRRR","SUUURRRRU","SUUURRRUR","SUUURRRUU","SUUURRURD","SUUURRURR","SUUURRURU","SUUURRUUL","SUUURRUUR","SUUURRUUU","SUUURURDD","SUUURURDR","SUUURURRD","SUUURURRR","SUUURURRU","SUUURURUR","SUUURURUU","SUUURUULL","SUUURUULU","SUUURUURD","SUUURUURR","SUUURUURU","SUUURUUUL","SUUURUUUR","SUUUURDDD","SUUUURDDR","SUUUURDRD","SUUUURDRR","SUUUURRDD","SUUUURRDL","SUUUURRDR","SUUUURRRD","SUUUURRRR","SUUUURRRU","SUUUURRUR","SUUUURRUU","SUUUURURD","SUUUURURR","SUUUURURU","SUUUURUUL","SUUUURUUR","SUUUURUUU","SUUUUURDD","SUUUUURDR","SUUUUURRD","SUUUUURRR","SUUUUURRU","SUUUUURUR","SUUUUURUU","SUUUUUURD","SUUUUUURR","SUUUUUURU","SUUUUUUUR","SUUUUUUUU"};
	mem [10] = {"SURDDDDDDD","SURDDDDDDL","SURDDDDDDR","SURDDDDDLD","SURDDDDDLL","SURDDDDDRD","SURDDDDLDD","SURDDDDLDL","SURDDDDLDR","SURDDDDLLD","SURDDDDLLL","SURDDDDLLU","SURDDDDRDD","SURDDDDRDL","SURDDDLDLD","SURDDDLDLL","SURDDDLDRD","SURDDDLLDL","SURDDDLLDR","SURDDDLLLD","SURDDDLLLL","SURDDDLLLU","SURDDDLLUL","SURDDDRDDD","SURDDDRDDL","SURDDDRDDR","SURDDDRDLD","SURDDDRDLL","SURDDDRURD","SURDDDRURR","SURURDDDDD","SURURDDDDL","SURURDDDDR","SURURDDDLD","SURURDDDRD","SURURDDDRR","SURURDDRDD","SURURDDRDL","SURURDDRDR","SURURDDRRD","SURURDDRRR","SURURDDRRU","SURURDRDDD","SURURDRDDL","SURURDRDDR","SURURDRDLD","SURURDRRDD","SURURDRRDL","SURURDRRDR","SURURDRRRD","SURURDRRRR","SURURDRRRU","SURURDRRUR","SURURDRRUU","SURURRDDDD","SURURRDDDL","SURURRDDDR","SURURRDDLD","SURURRDDRD","SURURRDRDD","SURURRDRDL","SURURRDRDR","SURURRRDDD","SURURRRDDL","SURURRRDDR","SURURRRDLD","SURURRRDRD","SURURRRDRR","SURURRRRDD","SURURRRRDL","SURURRRRDR","SURURRRRRD","SURURRRRRR","SURURRRRRU","SURURRRRUR","SURURRRURD","SURURRRURR","SURURRRURU","SURURRURDD","SURURRURDR","SURURRURRD","SURURRURRR","SURURRURRU","SURURRURUL","SURURRURUR","SURURULULD","SURURULULU","SURURULURR","SURURULURU","SURURULUUL","SURURULUUR","SURURULUUU","SURURURDDD","SURURURDDL","SURURURDDR","SURURURDRD","SURURURDRR","SURURURRDD","SURURURRDR","SURURURRRD","SURURURRRR","SURURURRRU","SURURURRUR","SURURURULU","SURURURURD","SURURURURR","SURURURURU","SUURDDDDDD","SUURDDDDDL","SUURDDDDDR","SUURDDDDLD","SUURDDDDLL","SUURDDDDRD","SUURDDDRDD","SUURDDDRDL","SUURDDDRDR","SUURDDDRUR","SUURDRDDDD","SUURDRDDDL","SUURDRDDDR","SUURDRDDLD","SUURDRDDRD","SUURDRDDRR","SUURDRDRDD","SUURDRDRDL","SUURDRDRDR","SUURDRDRRD","SUURDRDRRR","SUURDRDRRU","SUURDRRDDD","SUURDRRDDL","SUURDRRDDR","SUURDRRDLD","SUURDRRDRD","SUURDRRRDD","SUURDRRRDL","SUURDRRRDR","SUURDRRRRD","SUURDRRRRR","SUURDRRRRU","SUURDRRRUR","SUURDRRRUU","SUURDRRURD","SUURDRRURR","SUURDRRURU","SUURDRRUUL","SUURDRRUUR","SUURDRRUUU","SUURRDDDDD","SUURRDDDDL","SUURRDDDDR","SUURRDDDLD","SUURRDDDRD","SUURRDDRDD","SUURRDDRDL","SUURRDDRDR","SUURRDLDDD","SUURRDLDDR","SUURRDLDRD","SUURRDRDDD","SUURRDRDDL","SUURRDRDDR","SUURRDRDLD","SUURRDRDRD","SUURRDRDRU","SUURRRDDDD","SUURRRDDDL","SUURRRDDDR","SUURRRDDLD","SUURRRDDRD","SUURRRDDRR","SUURRRDLDD","SUURRRDLDR","SUURRRDRDD","SUURRRDRDL","SUURRRDRDR","SUURRRDRRD","SUURRRDRRU","SUURRRRDDD","SUURRRRDDL","SUURRRRDDR","SUURRRRDLD","SUURRRRDLL","SUURRRRDRD","SUURRRRDRR","SUURRRRRDD","SUURRRRRDL","SUURRRRRDR","SUURRRRRRD","SUURRRRRRR","SUURRRRRRU","SUURRRRRUR","SUURRRRRUU","SUURRRRURD","SUURRRRURR","SUURRRRURU","SUURRRRUUL","SUURRRRUUR","SUURRRURDD","SUURRRURDR","SUURRRURRD","SUURRRURRR","SUURRRURRU","SUURRRURUR","SUURRRUULL","SUURRRUULU","SUURRRUURD","SUURRRUURR","SUURRRUURU","SUURRURDDD","SUURRURDDL","SUURRURDDR","SUURRURDRD","SUURRURDRR","SUURRURRDD","SUURRURRDL","SUURRURRDR","SUURRURRRD","SUURRURRRR","SUURRURRRU","SUURRURRUR","SUURRURRUU","SUURRURURD","SUURRURURR","SUURRURURU","SUURRUULLU","SUURRUULUL","SUURRUULUR","SUURRUURDD","SUURRUURDR","SUURRUURRD","SUURRUURRR","SUURRUURRU","SUURRUURUL","SUURRUURUR","SUURURDDDD","SUURURDDDR","SUURURDDLD","SUURURDDRD","SUURURDDRR","SUURURDRDD","SUURURDRDL","SUURURDRDR","SUURURDRRD","SUURURDRRR","SUURURDRRU","SUURURRDDD","SUURURRDDL","SUURURRDDR","SUURURRDLD","SUURURRDRD","SUURURRRDD","SUURURRRDL","SUURURRRDR","SUURURRRRD","SUURURRRRR","SUURURRRRU","SUURURRRUR","SUURURRRUU","SUURURRURD","SUURURRURR","SUURURRURU","SUURURRUUL","SUURURRUUR","SUURURURDD","SUURURURDR","SUURURURRD","SUURURURRR","SUURURURRU","SUURURURUR","SUURURURUU","SUURURUULD","SUURURUULL","SUURURUULU","SUURURUURD","SUURURUURR","SUURURUURU","SUURUULLDD","SUURUULLDL","SUURUULLDR","SUURUULLUL","SUURUULLUU","SUURUULULD","SUURUULULL","SUURUULULU","SUURUULURR","SUURUULURU","SUURUULUUL","SUURUULUUR","SUURUURDDD","SUURUURDDR","SUURUURDRD","SUURUURDRR","SUURUURRDD","SUURUURRDL","SUURUURRDR","SUURUURRRD","SUURUURRRR","SUURUURRRU","SUURUURRUR","SUURUURRUU","SUURUURULL","SUURUURULU","SUURUURURD","SUURUURURR","SUURUURURU","SUURUURUUL","SUURUURUUR","SUUURDDDDD","SUUURDDDDR","SUUURDDDRD","SUUURDDRDD","SUUURDDRDR","SUUURDDRRD","SUUURDDRRR","SUUURDDRRU","SUUURDRDDD","SUUURDRDDR","SUUURDRDLD","SUUURDRDRD","SUUURDRDRR","SUUURDRRDD","SUUURDRRDL","SUUURDRRDR","SUUURDRRRD","SUUURDRRRR","SUUURDRRRU","SUUURDRRUR","SUUURDRRUU","SUUURRDDDD","SUUURRDDDL","SUUURRDDDR","SUUURRDDLD","SUUURRDDRD","SUUURRDDRR","SUUURRDLDD","SUUURRDLDR","SUUURRDRDD","SUUURRDRDL","SUUURRDRDR","SUUURRDRRD","SUUURRDRRU","SUUURRRDDD","SUUURRRDDL","SUUURRRDDR","SUUURRRDLD","SUUURRRDLL","SUUURRRDRD","SUUURRRDRR","SUUURRRRDD","SUUURRRRDL","SUUURRRRDR","SUUURRRRRD","SUUURRRRRR","SUUURRRRRU","SUUURRRRUR","SUUURRRRUU","SUUURRRURD","SUUURRRURR","SUUURRRURU","SUUURRRUUL","SUUURRRUUR","SUUURRRUUU","SUUURRURDD","SUUURRURDR","SUUURRURRD","SUUURRURRR","SUUURRURRU","SUUURRURUR","SUUURRURUU","SUUURRUULL","SUUURRUULU","SUUURRUURD","SUUURRUURR","SUUURRUURU","SUUURRUUUL","SUUURRUUUR","SUUURURDDD","SUUURURDDL","SUUURURDDR","SUUURURDRD","SUUURURDRR","SUUURURRDD","SUUURURRDL","SUUURURRDR","SUUURURRRD","SUUURURRRR","SUUURURRRU","SUUURURRUR","SUUURURRUU","SUUURURURD","SUUURURURR","SUUURURURU","SUUURURUUL","SUUURURUUR","SUUURURUUU","SUUURUULLD","SUUURUULLL","SUUURUULLU","SUUURUULUL","SUUURUULUU","SUUURUURDD","SUUURUURDR","SUUURUURRD","SUUURUURRR","SUUURUURRU","SUUURUURUR","SUUURUURUU","SUUURUUULD","SUUURUUULL","SUUURUUULU","SUUURUUURD","SUUURUUURR","SUUURUUURU","SUUUURDDDD","SUUUURDDDR","SUUUURDDRD","SUUUURDDRR","SUUUURDRDD","SUUUURDRDL","SUUUURDRDR","SUUUURDRRD","SUUUURDRRR","SUUUURDRRU","SUUUURRDDD","SUUUURRDDL","SUUUURRDDR","SUUUURRDLD","SUUUURRDRD","SUUUURRDRR","SUUUURRRDD","SUUUURRRDL","SUUUURRRDR","SUUUURRRRD","SUUUURRRRR","SUUUURRRRU","SUUUURRRUR","SUUUURRRUU","SUUUURRURD","SUUUURRURR","SUUUURRURU","SUUUURRUUL","SUUUURRUUR","SUUUURRUUU","SUUUURURDD","SUUUURURDR","SUUUURURRD","SUUUURURRR","SUUUURURRU","SUUUURURUR","SUUUURURUU","SUUUURUULL","SUUUURUULU","SUUUURUURD","SUUUURUURR","SUUUURUURU","SUUUURUUUL","SUUUURUUUR","SUUUURUUUU","SUUUUURDDD","SUUUUURDDR","SUUUUURDRD","SUUUUURDRR","SUUUUURRDD","SUUUUURRDL","SUUUUURRDR","SUUUUURRRD","SUUUUURRRR","SUUUUURRRU","SUUUUURRUR","SUUUUURRUU","SUUUUURURD","SUUUUURURR","SUUUUURURU","SUUUUURUUL","SUUUUURUUR","SUUUUURUUU","SUUUUUURDD","SUUUUUURDR","SUUUUUURRD","SUUUUUURRR","SUUUUUURRU","SUUUUUURUR","SUUUUUURUU","SUUUUUUURD","SUUUUUUURR","SUUUUUUURU","SUUUUUUUUR","SUUUUUUUUU"};
	mem [11] = allSnakes (11);
	mem [12] = allSnakes (12);
	mem [13] = allSnakes (13);
	mem [14] = allSnakes (14);
	mem [15] = allSnakes (15);
	int n;
	cin >> n;
	auto X = mem [n];
	//cout << "mem [" << n << "] = " << "{";
	n = 0;
	for (auto& x : X)
	{
		n ++;
		print (x);
	}
	//cout << "};\n";
	cout << "Snakes count = " << n << endl;
}
