(I1
I7
I3
(dp0
Vfigures.%l
p1
(Vfigures.cpp
p2
S'#include <bits/stdc++.h>\n#define endl \'\\n\'\nusing namespace std;\n\nconst int maxN = 7, maxP = 32770;\n\nbool is_triangle, dists[maxP];\nchar ch;\nint a[maxN], ind, points[maxP][3], dist[maxP][3], next_border, last_border, step, current_side, min_dist, max_dist, current_dist, min_ind, max_ind, cnt_not_col, cnt_max_dist;\nstring line;\n\nvoid precompute()\n{\n\tpoints[1][0] = 1;\n\tpoints[1][1] = 1;\n\tcurrent_side = 0;\n\tdist[1][0] = 0;\n\tdist[1][1] = 0;\n\tnext_border = 2;\n\tstep = 1;\n\t\n\tfor(int i = 2; i <= 32767; i++)\n\t{\n\t\tif(i == next_border)\n\t\t{\n\t\t\tif(current_side == 0)\n\t\t\t{\n\t\t\t\tcurrent_side = 1;\n\t\t\t\tpoints[i][0] = 1;\n\t\t\t\tpoints[i][1] = i;\n\t\t\t\tpoints[i][2] = i;\n\t\t\t\tdist[i][0] = dist[i - step][0] + 1;\n\t\t\t\tdist[i][1] = 0;\n\t\t\t\tdist[i][2] = 0;\n\t\t\t\tlast_border = next_border;\n\t\t\t\tnext_border = i + step;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tcurrent_side = 0;\n\t\t\t\tpoints[i][0] = i;\n\t\t\t\tpoints[i][1] = 1;\n\t\t\t\tpoints[i][2] = i - step;\n\t\t\t\tdist[i][0] = 0;\n\t\t\t\tdist[i][1] = dist[i - step - 1][1] + 1;\n\t\t\t\tdist[i][2] = step;\n\t\t\t\tlast_border = next_border;\n\t\t\t\tnext_border = i + 1;\n\t\t\t\tstep++;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tpoints[i][0] = points[i - step][0];\n\t\t\tpoints[i][1] = points[i - step - 1][1];\n\t\t\tpoints[i][2] = last_border;\n\t\t\tdist[i][0] = dist[i - step][0] + 1;\n\t\t\tdist[i][1] = dist[i - step - 1][1] + 1;\n\t\t\tdist[i][2] = dist[i - 1][2] + 1;\n\t\t}\n\t}\n}\nvoid input()\n{\n\tgetline(cin, line);\n\t\n\tfor(int i = 0; i < line.size(); i++)\n\t{\n\t\tif(line[i] == \' \' && line[i - 1] != \' \') \n\t\t{\n\t\t\tind++;\n\t\t\tcontinue;\n\t\t}\n\t\t\n\t\ta[ind] = (a[ind] * 10) + (line[i] - \'0\');\n\t}\n\t\n\tif(line[line.size() - 1] != \' \') ind++;\n}\n\nint main()\n{\n\tios_base::sync_with_stdio(false);\n\tcin.tie(NULL);\n\t\n\tinput();\n\t\n\tif(ind != 3 && ind != 4 && ind != 6)\n\t{\n\t\tcout<<"INCORRECT"<<endl;\n\t\treturn 0;\n\t}\n\t\n\tprecompute();\n\t\n\tsort(a, a + ind);\n\tif(ind == 3)\n\t{\n\t\tmin_dist = INT_MAX;\n\t\tmax_dist = 0;\n\t\tis_triangle = true;\n\t\t\n\t\tfor(int i = 0; i < 3; i++)\n\t\t{\n\t\t\tfor(int j = 0; j < 3; j++)\n\t\t\t{\n\t\t\t\tif(i == j) continue;\n\t\t\t\t\n\t\t\t\tif(points[a[i]][0] == points[a[j]][0])\n\t\t\t\t{\n\t\t\t\t\tmin_ind = min(i, j);\n\t\t\t\t\tmax_ind = max(i, j);\n\t\t\t\t\t\n\t\t\t\t\tcurrent_dist = dist[a[max_ind]][0] - dist[a[min_ind]][0];\n\t\t\t\t\t\n\t\t\t\t\tif(current_dist > max_dist) max_dist = current_dist;\n\t\t\t\t\tif(current_dist < min_dist) min_dist = current_dist;\n\t\t\t\t}\n\t\t\t\telse if(points[a[i]][1] == points[a[j]][1])\n\t\t\t\t{\n\t\t\t\t\tmin_ind = min(i, j);\n\t\t\t\t\tmax_ind = max(i, j);\n\t\t\t\t\t\n\t\t\t\t\tcurrent_dist = dist[a[max_ind]][1] - dist[a[min_ind]][1];\n\t\t\t\t\t\n\t\t\t\t\tif(current_dist > max_dist) max_dist = current_dist;\n\t\t\t\t\tif(current_dist < min_dist) min_dist = current_dist;\n\t\t\t\t}\n\t\t\t\telse if(points[a[i]][2] == points[a[j]][2])\n\t\t\t\t{\n\t\t\t\t\tmin_ind = min(i, j);\n\t\t\t\t\tmax_ind = max(i, j);\n\t\t\t\t\t\n\t\t\t\t\tcurrent_dist = dist[a[max_ind]][2] - dist[a[min_ind]][2];\n\t\t\t\t\t\n\t\t\t\t\tif(current_dist > max_dist) max_dist = current_dist;\n\t\t\t\t\tif(current_dist < min_dist) min_dist = current_dist;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tis_triangle = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\t//cout<<is_triangle<<" "<<min_dist<<" "<<max_dist<<endl;\n\t\t\n\t\tif(is_triangle && min_dist == max_dist) cout<<"T "<<min_dist<<endl;\n\t\telse cout<<"INCORRECT"<<endl;\n\t}\n\telse if(ind == 4)\n\t{\n\t\tmin_dist = INT_MAX;\n\t\tmax_dist = 0;\n\t\tcnt_not_col = 0;\n\t\t\n\t\tfor(int i = 0; i < 4; i++)\n\t\t{\n\t\t\tfor(int j = 0; j < 4; j++)\n\t\t\t{\n\t\t\t\tif(i == j) continue;\n\t\t\t\t\n\t\t\t\tif(points[a[i]][0] == points[a[j]][0])\n\t\t\t\t{\n\t\t\t\t\tmin_ind = min(i, j);\n\t\t\t\t\tmax_ind = max(i, j);\n\t\t\t\t\t\n\t\t\t\t\tcurrent_dist = dist[a[max_ind]][0] - dist[a[min_ind]][0];\n\t\t\t\t\t\n\t\t\t\t\tif(current_dist > max_dist) max_dist = current_dist;\n\t\t\t\t\tif(current_dist < min_dist) min_dist = current_dist;\n\t\t\t\t}\n\t\t\t\telse if(points[a[i]][1] == points[a[j]][1])\n\t\t\t\t{\n\t\t\t\t\tmin_ind = min(i, j);\n\t\t\t\t\tmax_ind = max(i, j);\n\t\t\t\t\t\n\t\t\t\t\tcurrent_dist = dist[a[max_ind]][1] - dist[a[min_ind]][1];\n\t\t\t\t\t\n\t\t\t\t\tif(current_dist > max_dist) max_dist = current_dist;\n\t\t\t\t\tif(current_dist < min_dist) min_dist = current_dist;\n\t\t\t\t}\n\t\t\t\telse if(points[a[i]][2] == points[a[j]][2])\n\t\t\t\t{\n\t\t\t\t\tmin_ind = min(i, j);\n\t\t\t\t\tmax_ind = max(i, j);\n\t\t\t\t\t\n\t\t\t\t\tcurrent_dist = dist[a[max_ind]][2] - dist[a[min_ind]][2];\n\t\t\t\t\t\n\t\t\t\t\tif(current_dist > max_dist) max_dist = current_dist;\n\t\t\t\t\tif(current_dist < min_dist) min_dist = current_dist;\n\t\t\t\t}\n\t\t\t\telse cnt_not_col++;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif(cnt_not_col == 2 && min_dist == max_dist) cout<<"R "<<min_dist<<endl;\n\t\telse cout<<"INCORRECT"<<endl;\n\t}\n\telse\n\t{\n\t\tmin_dist = INT_MAX;\n\t\tmax_dist = 0;\n\t\tcnt_max_dist = 0;\n\t\tcnt_not_col = 0;\n\t\t\n\t\t//cout<<points[13][0]<<" "<<points[13][1]<<endl;\n\t\t//cout<<points[26][0]<<" "<<points[26][1]<<endl;\n\t\t\n\t\tfor(int i = 0; i < 6; i++)\n\t\t{\n\t\t\tfor(int j = 0; j < 6; j++)\n\t\t\t{\n\t\t\t\tif(i == j) continue;\n\t\t\t\t\n\t\t\t\tif(points[a[i]][0] == points[a[j]][0])\n\t\t\t\t{\n\t\t\t\t\tmin_ind = min(i, j);\n\t\t\t\t\tmax_ind = max(i, j);\n\t\t\t\t\t\n\t\t\t\t\tcurrent_dist = dist[a[max_ind]][0] - dist[a[min_ind]][0];\n\t\t\t\t\t\n\t\t\t\t\t//cout<<a[i]<<" "<<a[j]<<" "<<current_dist<<endl;\n\t\t\t\t\t\n\t\t\t\t\tif(current_dist > max_dist) \n\t\t\t\t\t{\n\t\t\t\t\t\tmax_dist = current_dist;\n\t\t\t\t\t\tcnt_max_dist = 1;\n\t\t\t\t\t}\n\t\t\t\t\telse if(current_dist == max_dist) cnt_max_dist++;\n\t\t\t\t\tif(current_dist < min_dist) min_dist = current_dist;\n\t\t\t\t}\n\t\t\t\telse if(points[a[i]][1] == points[a[j]][1])\n\t\t\t\t{\n\t\t\t\t\tmin_ind = min(i, j);\n\t\t\t\t\tmax_ind = max(i, j);\n\t\t\t\t\t\n\t\t\t\t\tcurrent_dist = dist[a[max_ind]][1] - dist[a[min_ind]][1];\n\t\t\t\t\t\n\t\t\t\t\t//cout<<"haha   "<<a[i]<<" "<<a[j]<<" "<<current_dist<<endl;\n\t\t\t\t\t\n\t\t\t\t\tif(current_dist > max_dist) \n\t\t\t\t\t{\n\t\t\t\t\t\tmax_dist = current_dist;\n\t\t\t\t\t\tcnt_max_dist = 1;\n\t\t\t\t\t}\n\t\t\t\t\telse if(current_dist == max_dist) cnt_max_dist++;\n\t\t\t\t\tif(current_dist < min_dist) min_dist = current_dist;\n\t\t\t\t}\n\t\t\t\telse if(points[a[i]][2] == points[a[j]][2])\n\t\t\t\t{\n\t\t\t\t\tmin_ind = min(i, j);\n\t\t\t\t\tmax_ind = max(i, j);\n\t\t\t\t\t\n\t\t\t\t\tcurrent_dist = dist[a[max_ind]][2] - dist[a[min_ind]][2];\n\t\t\t\t\t\n\t\t\t\t\t//cout<<"haha2 "<<a[i]<<" "<<a[j]<<" "<<current_dist<<endl;\n\t\t\t\t\t\n\t\t\t\t\tif(current_dist > max_dist) \n\t\t\t\t\t{\n\t\t\t\t\t\tmax_dist = current_dist;\n\t\t\t\t\t\tcnt_max_dist = 1;\n\t\t\t\t\t}\n\t\t\t\t\telse if(current_dist == max_dist) cnt_max_dist++;\n\t\t\t\t\tif(current_dist < min_dist) min_dist = current_dist;\n\t\t\t\t}\n\t\t\t\telse cnt_not_col++;\n\t\t\t}\n\t\t}\n\t\t\n\t\t//cout<<cnt_not_col<<" "<<min_dist<<" "<<max_dist<<" "<<cnt_max_dist<<endl;\n\t\t\n\t\tif(cnt_not_col == 12 && 2 * min_dist == max_dist &&  cnt_max_dist == 6) cout<<"H "<<min_dist<<endl;\n\t\telse cout<<"INCORRECT"<<endl;\n\t}\n\t\n\treturn 0;\n}\n'
p3
tp4
stp5
.