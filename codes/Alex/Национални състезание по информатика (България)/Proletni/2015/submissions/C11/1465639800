(I1
I11
I3
(dp0
Vfigures.%l
p1
(Vfigures.cpp
p2
S'#include <iostream>\r\n#include <algorithm>\r\nusing namespace std;\r\nint p, vert[8], n=0, rows[8];\r\nint find_row(int s)\r\n{\r\n    s*=2;\r\n    int k;\r\n    for (int i=1; i<257; i++)\r\n    {\r\n        if (i*(i+1)<=s) continue;\r\n        else\r\n        {\r\n            k=i-1;\r\n            break;\r\n        }\r\n    }\r\n    if (k*(k+1)<s) k++;\r\n    return k;\r\n}\r\nvoid triangle()\r\n{\r\n    bool fl=0;\r\n    for (int i=0; i<n; i++)\r\n    {\r\n        rows[i]=find_row(vert[i]);\r\n    }\r\n    int size_strana, distance, third;\r\n    if (rows[0]==rows[1] && rows[1]!=rows[2])\r\n    {\r\n        size_strana=vert[1]-vert[0];\r\n        distance=rows[0]*(rows[0]+1)/2-vert[0];\r\n        third=(rows[0]+size_strana)*(rows[0]+size_strana+1)/2-distance;\r\n        if (third==vert[2])\r\n        {\r\n            cout <<"T "<<size_strana<<endl;\r\n            fl=1;\r\n        }\r\n    }\r\n    else if (rows[1]==rows[2] && rows[2]!=rows[0])\r\n    {\r\n        size_strana=vert[2]-vert[1];\r\n        distance=rows[2]*(rows[2]+1)/2-vert[2];\r\n        third=(rows[2]-size_strana)*(rows[2]-size_strana+1)/2-distance;\r\n        if (third==vert[0])\r\n        {\r\n            cout <<"T "<<size_strana<<endl;\r\n            fl=1;\r\n        }\r\n    }\r\n    if (!fl) cout <<"INCORRECT\\n";\r\n}\r\nvoid rhombus()\r\n{\r\n  bool fl=0;\r\n  for (int i=0; i<n; i++)\r\n  {\r\n      rows[i]=find_row(vert[i]);\r\n  }\r\n  int size_strana, dis1, dis2;\r\n  if (rows[1]==rows[2] && rows[0]!=rows[3])\r\n  {\r\n      size_strana=vert[2]-vert[1];\r\n      dis1=(rows[2]+1)*rows[2]/2-vert[2];\r\n      int third=(rows[2]-size_strana)*(rows[2]-size_strana+1)/2-dis1;\r\n      dis2=(rows[1]+1)*rows[1]/2-vert[1];\r\n      int forth=(rows[1]+size_strana)*(rows[1]+size_strana+1)/2-dis2;\r\n      if (third==vert[0] && forth==vert[3])\r\n      {\r\n          cout <<"R "<<size_strana<<endl;\r\n          fl=1;\r\n      }\r\n\r\n  }\r\n  else if (rows[0]==rows[1] && rows[2]==rows[3] && vert[1]-vert[0]==vert[3]-vert[2])\r\n  {\r\n      size_strana=vert[1]-vert[0];\r\n      dis1=rows[0]*(rows[0]+1)/2-vert[0];\r\n      int third=(rows[0]+size_strana)*(rows[0]+size_strana+1)/2-dis1;\r\n      if (third==vert[3])\r\n      {\r\n          cout <<"R "<<size_strana<<endl;\r\n          fl=1;\r\n      }\r\n  }\r\n  if (!fl) cout <<"INCORRECT\\n";\r\n\r\n}\r\nvoid hexagon()\r\n{\r\n    bool fl=0;\r\n    for (int i=0; i<n; i++)\r\n    {\r\n        rows[i]=find_row(vert[i]);\r\n    }\r\n    if (rows[0]==rows[1] && rows[2]==rows[3] && rows[4]==rows[5] && vert[1]-vert[0]==vert[5]-vert[4])\r\n    {\r\n        int size_strana=vert[5]-vert[4],\r\n        centre=vert[2]+size_strana,\r\n        dis1=rows[0]*(rows[0]+1)/2-vert[0],\r\n        is_centre1=(rows[0]+size_strana)*(rows[0]+size_strana+1)/2-dis1,\r\n        dis2=rows[5]*(rows[5]+1)/2-vert[5],\r\n        is_centre2=(rows[5]-size_strana)*(rows[5]-size_strana+1)/2-dis2;\r\n        if (is_centre1==is_centre2 && is_centre1==centre)\r\n        {\r\n            cout <<"H "<<size_strana<<endl;\r\n            fl=1;\r\n        }\r\n    }\r\n    if (!fl) cout <<"INCORRECT\\n";\r\n}\r\nint main ()\r\n{\r\n    while (1)\r\n    {\r\n        if (cin.eof()) break;\r\n        cin >>p;\r\n        vert[n]=p;\r\n        n++;\r\n    }\r\n    n--;\r\n    sort (vert, vert+n);\r\n    if (n==3) triangle();\r\n    else if (n==4) rhombus();\r\n    else if (n==6) hexagon();\r\n    else\r\n    {\r\n        cout <<"INCORRECT\\n";\r\n    }\r\n    return 0;\r\n}\r\n'
p3
tp4
stp5
.