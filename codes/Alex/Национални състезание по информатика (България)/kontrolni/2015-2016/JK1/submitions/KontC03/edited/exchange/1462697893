#include <iostream>
#include <utility>
#include <vector>
#include <algorithm>
using namespace std;

const long long MAXN=256;
const long long MAXS=2048;

long long n, s;
long long a[MAXN], b[MAXN], c[MAXN];

vector<pair<long long, long long>> coins;
string memo[MAXS][MAXN];

void Init()
{
    cin>>s>>n;
    for (long long i=0; i<n; i++)
    {
        cin>>a[i];
    }
    for (long long i=0; i<n; i++)
    {
        cin>>b[i];
        c[a[i]]+=b[i];
    }
    for (long long i=1; i<=200; i++)
    {
        if (c[i]!=0) coins.emplace_back(i, c[i]);
    }
    sort(coins.begin(), coins.end());
}

string Plus(string x, string y)
{
    while (x.size()<y.size()) x="0"+x;
    while (x.size()>y.size()) y="0"+y;

    string res=""; int pren=0;
    for (int i=x.size()-1; i>=0; i--)
    {
        int tmp=x[i]+y[i]-96+pren;
        res=(char)((tmp%10)+48)+res;
        pren=tmp/10;
    }
    if (pren!=0) res="1"+res;
    return res;
}

void ToMinusOne()
{
    for (long long i=0; i<MAXS; i++)
    {
        for (long long j=0; j<MAXN; j++)
        {
            memo[i][j]="*";
        }
    }
}

string Solve(long long sum, long long cnt)
{
    if (memo[sum][cnt]!="*") return memo[sum][cnt];

    if (sum==0)
    {
        memo[sum][cnt]="1";
        return "1";
    }
    else if (cnt>=coins.size())
    {
        memo[sum][cnt]="0";
        return "0";
    }

    string tmp="0";
    for (long long i=0; i<=coins[cnt].second; i++)
    {
        long long newSum=sum-coins[cnt].first*i;
        if (newSum>=0) tmp=Plus(tmp, Solve(newSum, cnt+1));
    }

    memo[sum][cnt]=tmp;
    return tmp;
}

int main()
{
    Init();
    ToMinusOne();
    cout<<Solve(s, 0)<<endl;
    return 0;
}

