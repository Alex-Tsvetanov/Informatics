#include <bits/stdc++.h>
#define endl '\n'
using namespace std;

const int maxN = 205, maxA = 205, maxB = 5005, maxS = 2005;

struct coin
{
	int cost, count;
	
	coin(){}
	coin(int cost, int count)
	{
		this->cost = cost;
		this->count = count;
	}
};

bool used_states[250][150][1000];
int s, n, a[maxN], b, coins[maxA], dp[250][200][1000];
vector<coin> all_coins;

int solve(int sum, int bag, int ind)
{
	//cout<<"     "<<sum<<" "<<bag<<" "<<ind<<endl;
	if(sum == s) return 1;
	else if(bag >= all_coins.size() || ind > all_coins[bag].count || sum > s) return 0;
	else if(used_states[sum][bag][ind]) return dp[sum][bag][ind];
	
	int val1 = solve(sum, bag + 1, 0), val2 = solve(sum + all_coins[bag].cost, bag, ind + 1);
	if(ind == all_coins[bag].count) val2 = 0;
	used_states[sum][bag][ind] = true;
	dp[sum][bag][ind] = val1 + val2;
	
	//cout<<sum<<" "<<bag<<" "<<ind<<" "<<val1 + val2<<endl;
	return dp[sum][bag][ind];
}

int main()
{
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	
	cin>>s>>n;
	for(int i = 0; i < n; i++)
	{
		cin>>a[i];
	}
	for(int i = 0; i < n; i++)
	{
		cin>>b;
		coins[a[i]] += b;
	}
	
	for(int i = 0; i < maxA; i++)
	{
		if(coins[i] != 0) all_coins.push_back(coin(i, coins[i]));
	}
	
	cout<<solve(0, 0, 0)<<endl;
	return 0;
}
