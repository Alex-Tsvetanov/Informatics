#include <iostream>
#include <utility>
#include <vector>
#include <algorithm>
using namespace std;

const long long MAXN=256;
const long long MAXS=2048;

long long n, s;
long long a[MAXN], b[MAXN], c[MAXN];

vector<pair<long long, long long>> coins;
string dp[MAXS];

void Init()
{
    cin>>s>>n;
    for (long long i=0; i<n; i++)
    {
        cin>>a[i];
    }
    for (long long i=0; i<n; i++)
    {
        cin>>b[i];
        c[a[i]]+=b[i];
    }
    for (long long i=1; i<=200; i++)
    {
        if (c[i]!=0) coins.emplace_back(i, c[i]);
    }
    sort(coins.begin(), coins.end());
}

string Plus(string x, string y)
{
    while (x.size()<y.size()) x="0"+x;
    while (x.size()>y.size()) y="0"+y;

    string res=""; int pren=0;
    for (int i=x.size()-1; i>=0; i--)
    {
        int tmp=x[i]+y[i]-96+pren;
        res=(char)((tmp%10)+48)+res;
        pren=tmp/10;
    }
    if (pren!=0) res="1"+res;
    return res;
}

void Solve()
{
    dp[0]="1";
    for (long long i=0; i<coins.size(); i++)
    {
        for (long long j=s; j>=1; j--)
        {
            for (long long k=1; k<=coins[i].second; k++)
            {
                long long ind=j-coins[i].first*k;

                if (ind<0) k=coins[i].second+1;
                else dp[j]=Plus(dp[j], dp[ind]);
            }
        }
    }
}

int main()
{
    Init();
    Solve();
    cout<<dp[s]<<endl;
    return 0;
}

