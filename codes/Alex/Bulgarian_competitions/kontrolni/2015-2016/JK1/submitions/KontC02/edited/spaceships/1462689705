#include <bits/stdc++.h>
#define endl '\n'
using namespace std;

const int maxN = 105, maxM = 105;

char board[maxN][maxM], board_copy[maxN][maxM];
int n, m, ans;


void copy_array()
{
	for(int i = 0; i < n; i++)
	{
		for(int j = 0; j < m; j++)
		{
			board_copy[i][j] = board[i][j];
		}
	}
}
void solve(int i, int j, int count_moves)
{
	if(board_copy[i][j] == '^')
	{
		if(i <= 0) 
		{
			if(count_moves + 1 > ans) ans = count_moves + 1;
			return;
		}
		
		
		if(board_copy[i - 1][j] == '.') swap(board_copy[i - 1][j], board_copy[i][j]);
		else board_copy[i][j] = '.';
		solve(i - 1, j, count_moves + 1);
	}
	else if(board_copy[i][j] == '>')
	{
		if(j >= m - 1)
		{
			if(count_moves + 1 > ans) ans = count_moves + 1;
			return;
		}
		
		if(board_copy[i][j + 1] == '.') swap(board_copy[i][j + 1], board_copy[i][j]);
		else board_copy[i][j] = '.';
		solve(i, j + 1, count_moves + 1);
	}
	else if(board_copy[i][j] == 'v')
	{
		if(i >= n - 1)
		{
			if(count_moves + 1 > ans) ans = count_moves + 1;
			return;
		}
		
		if(board_copy[i + 1][j] == '.') swap(board_copy[i + 1][j], board_copy[i][j]);
		else board_copy[i][j] = '.';
		solve(i + 1, j, count_moves + 1);
	}
	else
	{
		if(j <= 0)
		{
			if(count_moves + 1 > ans) ans = count_moves + 1;
			return;
		}
		
		if(board_copy[i][j - 1] == '.') swap(board_copy[i][j - 1], board_copy[i][j]);
		else board_copy[i][j] = '.';
		solve(i, j - 1, count_moves + 1);
	}
}

int main()
{
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	
	cin>>n>>m;
	for(int i = 0; i < n; i++)
	{
		for(int j = 0; j < m; j++)
		{
			cin>>board[i][j];
		}
	}
	
	for(int i = 0; i < n; i++)
	{
		for(int j = 0; j < m; j++)
		{
			if(board[i][j] != '.') 
			{
				copy_array();
				solve(i, j, 0);
			}
		}
	}
	
	cout<<ans<<endl;
	return 0;
}
