#include<iostream>
#include<cstring>
#include<algorithm>
#include<queue>
using namespace std;
queue<long long>Q;
long long n,s,a[256],b[256],otg=0,koe[201],d,st,t[1000000],p=1,sumi[2048],l,dali[2001][2001];
long long napravisuma(long long kolkoshte,long long dokydesme){
    //cout<<kolkoshte<<" "<<dokydesme<<"\n";
    if(kolkoshte==0){
        otg++;
        return otg;
    }
    while(b[dokydesme]==0 and dokydesme<n){
        dokydesme++;
    }
    if(kolkoshte<0 or dokydesme==n){
        return 0;
    }
for(long long i=0;i<=b[dokydesme];i++){
        if(kolkoshte-(i*a[dokydesme])<0){
            break;
        }
    napravisuma(kolkoshte-(i*a[dokydesme]),dokydesme+1);
}
}
int main(){
ios::sync_with_stdio(false);
cin>>s>>n;
for(long long i=0;i<n;i++){
    cin>>a[i];
    koe[a[i]]=i;
}
for(long long i=0;i<n;i++){
    cin>>d;
    if(d<=2000){
    b[koe[a[i]]]=b[koe[a[i]]]+d;
    }
}
t[0]=0;
sumi[0]=0;
for(long long i=0;i<n;i++){
        if(b[i]>0){
                long long g=p;
    for(long long r=0;r<g;r++){
            if(t[r]+a[i]<s+1){
            Q.push(t[r]+a[i]);
            if(sumi[t[r]+a[i]]==0){
                    t[p]=t[r]+a[i];
                p++;
            }
        sumi[t[r]+a[i]]=sumi[t[r]]+1;
            }
    }
    while(Q.empty()==false){
            for(long long j=1;j<b[i];j++){
        //for(long long r=0;r<p;r++){
        if(Q.front()+a[i]*j==s){
             //  cout<<a[i]<<" "<<j<<" "<<Q.front()<<"\n";
           otg++;
          // dali[Q.front()][a[i]*j]=1;
    }
        //cout<<Q.front()+a[i]*j<<"\n";
                        if(sumi[Q.front()+a[i]*j]==0){
                    t[p]=Q.front()+a[i];
                p++;
            }
        sumi[Q.front()+a[i]*j]=sumi[Q.front()]+1;
        }
        Q.pop();
    }
        }
}
//napravisuma(s,0);
cout<<otg;
return 0;
}
