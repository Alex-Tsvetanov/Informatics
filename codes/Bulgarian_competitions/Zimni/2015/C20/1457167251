(I3
I99
I9
(dp0
Vflights.%l
p1
(Vflights.cpp
p2
S'#include <iostream>\r\n#include <algorithm>\r\n#include <queue>\r\n#include <vector>\r\n\r\nusing namespace std;\r\n\r\nstruct flight\r\n{\r\n    int from, to;\r\n    int maxP;\r\n};\r\n\r\nbool kak (flight a, flight b)\r\n{\r\n    return a.from < b.from;\r\n}\r\n\r\nflight flights[200001];\r\nvector<int> susediPoleti[20001];\r\nqueue<flight> q;\r\n\r\nint res[200001];\r\n\r\nint main ()\r\n{\r\n    int n, m;\r\n    cin >> n >> m;\r\n\r\n    for (int i = 0; i < m; ++i)\r\n    {\r\n        cin >> flights[i].from >> flights[i].to >> flights[i].maxP;\r\n        susediPoleti[flights[i].from].push_back(i);\r\n        susediPoleti[flights[i].to].push_back(i);\r\n        if (flights[i].from == 0 and flights[i].maxP > res[flights[i].to])\r\n        {\r\n            res[flights[i].to] = flights[i].maxP;\r\n            //cout << flights[i].to << " -> " << flights[i].maxP << "\\n";\r\n        }\r\n        if (flights[i].to == 0 and flights[i].maxP > res[flights[i].from])\r\n        {\r\n            res[flights[i].from] = flights[i].maxP;\r\n            //cout << flights[i].from << " -> " << flights[i].maxP << "\\n";\r\n        }\r\n        if (res[flights[i].from] != 0 or res[flights[i].to] != 0)\r\n        {\r\n            q.push(flights[i]);\r\n        }\r\n        //if (res[flights[i].to] != 0)\r\n        //{\r\n        //    flight a;\r\n        //    a.from = flights[i].to;\r\n        //    a.to = flights[i].from;\r\n        //    a.maxP = flights[i].maxP;\r\n        //    q.push(a);\r\n        //}\r\n    }\r\n\r\n    //sort(flights, flights + m, kak); //????\r\n\r\n    //cout << endl;\r\n\r\n    while (!q.empty())\r\n    {\r\n        flight curr = q.front();\r\n        q.pop();\r\n\r\n        int res1 = max(res[curr.to], min(res[curr.from], curr.maxP));\r\n        if (res1 > res[curr.to] and curr.to != 0)\r\n        {\r\n            res[curr.to] = res1;\r\n            //cout << "A " << curr.to << " -> " << res1 << " : " << curr.from << " " << curr.to << " " << curr.maxP << "\\n";\r\n            for (int i = 0 ; i < susediPoleti[curr.to].size(); ++i)\r\n            {\r\n                if(flights[susediPoleti[curr.to][i]].from != curr.from or flights[susediPoleti[curr.to][i]].to != curr.to or flights[susediPoleti[curr.to][i]].maxP != curr.maxP)\r\n                {\r\n                    q.push(flights[susediPoleti[curr.to][i]]);\r\n                }\r\n            }\r\n        }\r\n\r\n        res1 = max(res[curr.from], min(res[curr.to], curr.maxP));\r\n        if (res1 > res[curr.from] and curr.from != 0)\r\n        {\r\n            res[curr.from] = res1;\r\n            //cout << "B " << curr.from << " -> " << res1 << " : " << curr.from << " " << curr.to << " " << curr.maxP << "\\n";\r\n            for (int i = 0 ; i < susediPoleti[curr.to].size(); ++i)\r\n            {\r\n                if(flights[susediPoleti[curr.from][i]].from != curr.from or flights[susediPoleti[curr.from][i]].to != curr.to or flights[susediPoleti[curr.from][i]].maxP != curr.maxP)\r\n                {\r\n                    q.push(flights[susediPoleti[curr.from][i]]);\r\n                }\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    for (int i = 1; i < n; ++i)\r\n    {\r\n        cout << res[i];\r\n        if (i != n - 1)\r\n        {\r\n            cout << \' \';\r\n        }\r\n    }\r\n    cout << \'\\n\';\r\n    return 0;\r\n}\r\n'
p3
tp4
stp5
.